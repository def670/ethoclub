export function replaceNumber(normalized, format) {
    // 1.734 -> 1K
    // replace 0's with absolute number while preserving space and remaining text
    // return format.replace(/0*(\s*)(\w+)/, Math.round(number) + '$1$2');
    return format.replace(/0*/, normalized);
}
export function normalizeLocale(locale) {
    if (locale instanceof Array) {
        return locale[0].replace(/_/, '-').toLowerCase();
    }
    return locale.replace(/_/, '-').toLowerCase();
}
/**
 * If rule only contains 0, it indicates no short number formatting applied
 * e.g. "ja" 1234 -> 1234 and not 1K
 */
export function needsFormatting(format) {
    return format.match(/[^0]/);
}
/**
 * Given a format: { af: {locale: "af", numbers: {â€¦}} af-na: {locale: "af-NA", parentLocale: "af"} }
 * recursively find numbers hash
 *
 * @method findLocaleData
 * @param localeData
 * @param locale
 */
export function findLocaleData(localeData, locale) {
    var topLevelData = localeData[locale];
    if (!topLevelData) {
        return;
    }
    var numbersHash = topLevelData.numbers;
    var parentLocale = topLevelData.parentLocale;
    if (!numbersHash && parentLocale) {
        numbersHash = findLocaleData(localeData, parentLocale);
    }
    return numbersHash;
}
export function findMatchingLocale(localeData, locale) {
    var topLevelData = localeData[locale];
    if (!topLevelData) {
        return;
    }
    var numbersHash = topLevelData.numbers;
    var parentLocale = topLevelData.parentLocale;
    if (!numbersHash && parentLocale) {
        numbersHash = findLocaleData(localeData, parentLocale);
    }
    return numbersHash;
}
//# sourceMappingURL=format-utils.js.map